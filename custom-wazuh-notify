#!/usr/bin/env python3

import json, sys, smtplib, yaml, logging
from mako.lookup import TemplateLookup
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from utils.utils import get


def render_template(template_name, data):
    lookup = TemplateLookup(directories=['./integrations/'])
    json_template = lookup.get_template(template_name)
    return json_template.render(data=data)

def configure_logger(log_level, log_output, log_file_path):
    logger = logging.getLogger(__name__)
    logger.setLevel(getattr(logging, log_level.upper()))

    formatter = logging.Formatter('%(asctime)s %(filename)s: %(levelname)s: %(name)s: %(message)s', "%Y/%m/%d %H:%M:%S")

    if log_output.lower() == 'file':
        file_handler = logging.FileHandler(log_file_path)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    elif log_output.lower() == 'stdout':
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(formatter)
        logger.addHandler(stream_handler)
    else:
        raise ValueError("Invalid log output mode. Use 'file' or 'stdout'")

    return logger

def alert_email(config, event, from_email, destination_emails, subject_email, template_name):
    body = render_template(template_name, event)
    logger.info(f"Rendered email body: {body}")
    destination_email = destination_emails.split(",")

    smtp_server = get(config, 'smtp_server', None)
    smtp_port = get(config, 'smtp_port', None)
    smtp_username = get(config, 'smtp_username', None)
    smtp_password = get(config, 'smtp_password', None)

    if from_email == None:
        from_email = config['default_from']

    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = ",".join(destination_email)
    msg['Subject'] = subject_email

    msg.attach(MIMEText(body, 'plain'))

    try:
        # Send email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_username, smtp_password)
            server.sendmail(from_email, destination_email, msg.as_string())
            server.quit()
        logger.info("Email sent!")
    except Exception as e:
        logger.error(f"Error sending email: {e}")

def main():
    if len(sys.argv) < 3:
        logger.error("Missing required params")
        exit(1)
    wazuh_arguments = ''.join(sys.argv[2:])
    wazuh_arguments = wazuh_arguments.split('> /dev/null')[0].strip()
    wazuh_event_file_path = sys.argv[1]
    wazuh_integration_params = json.loads(wazuh_arguments)
    alert_type = get(wazuh_integration_params, 'alert_type', None)
    if alert_type == None:
        logger.error(f"Missing 'alert_type' {alert_type} in params {wazuh_integration_params}")
        exit(1)

    # Load JSON data
    with open(wazuh_event_file_path, "r") as json_file:
        wazuh_event = json.load(json_file)

    if alert_type == 'email':
        # Checking integration params
        from_email = get(wazuh_integration_params, 'alert_config.email_from', None)
        subject_email = get(wazuh_integration_params,'alert_config.email_subject', None)
        if subject_email == None:
            logger.error(f"Alert type {alert_type}, missing integration_param 'email_subject', current params {wazuh_integration_params}")
            exit(1)
        template_name = get(wazuh_integration_params, 'alert_config.email_template', None)
        if template_name == None:
            logger.error(f"Alert type {alert_type}, missing integration_param 'email_template', current params {wazuh_integration_params}")
            exit(1)
        destination_emails = get(wazuh_integration_params, 'alert_config.destination_emails', None)
        if destination_emails == None:
            logger.error(f"Alert type {alert_type}, missing integration_param 'destination_emails', current params {wazuh_integration_params}")
            exit(1)
        profile_name = get(wazuh_integration_params, 'alert_config.profile', None)
        if profile_name == None:
            logger.error(f"Alert type {alert_type}, missing integration_param 'profile', current params {wazuh_integration_params}")
            exit(1)
        # Checking profile
        config_profile_email = get(config, f'profiles.email.{profile_name}', None)
        if config_profile_email == None:
            logger.error(f"Alert type {alert_type}, missing key 'profiles.email.{profile_name}' in config.yaml, current params {wazuh_integration_params}")
            exit(1)
        alert_email(config['profiles']['email'][profile_name], wazuh_event, from_email, destination_emails, subject_email, template_name)

if __name__ == "__main__":
    # Load YAML data
    with open('./integrations/config.yaml', 'r') as yaml_file:
        config = yaml.safe_load(yaml_file)

    logger = configure_logger(config['global_config']['log_level'],
                          config['global_config']['log_output'],
                          config['global_config']['log_path'])
    main()